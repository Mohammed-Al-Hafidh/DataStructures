DAY 02-Tasks
In your program define method as below:

    static int getIfExists(int[][] data, int row, int col) {
	     // If exists, return the element, otherwise return 0
    }

    static int sumOfCross(int[][] data, int row, int col) {
	    // return sum of the element at row/col
        // plus (if they exist) element above, below, to the left and right of it
    }
    
	// useful helper for debugging
	static void print2D(int[][] data) { ... }
	
	// duplicate a jagged array
	static int[][] duplicateEmptyArray2D(int[][] orig2d) { ... }
	
    public static void main(String[] args) {
        int[][] data2D = {
            {1, 3, 6, 8},
            {7, 1, 2, 3},
            {8, 3, 2, 1},
            {1, 7, 1, 9},
        };

}
		
PART A:
Using sumOfCross() method write a search that will find
which element at row/col has the smallest sum of itself and the cross elements surrounding it.
        
PART B: Create an integer array data2Dsums of identical size to data2D where
each element of it is the cross-sum of the element in the original array.
then print out the original, and print out the new array

Coding bat exercises =>
https://codingbat.com/prob/p170924
https://codingbat.com/prob/p101409
https://codingbat.com/prob/p152339




Day02CachingFibonacci => more difficult
---------------------

Initial code:

class FibCached {

	FibCached() {
		fibsCached.add(0L); // #0
		fibsCached.add(1L); // #1
	}

	private ArrayList<Long> fibsCached = new ArrayList<>(); // NOT a HashMap !
	private fibsCompCount = 2;
	// in a correct caching implementation fibsCompCount will end up the same as fibsCached.size();

	public long getNthFib(int n) { ... }
	
	// You can find implementation online, recursive or non-recursive.
	// For 100% solution you should use values in fibsCached as a starting point
	// instead of always starting from the first two values of 0, 1.
	private long computeNthFib(int n) { ... }
	
	// You are allowed to add another private method for fibonacci generation
	// if you want to use recursive approach. I recommend non-recursive though.

	// How many fibonacci numbers has your code computed as opposed to returned cached?
	// Use this in your testing to make sure your caching actually works properly.
	public int getCountOfFibsComputed() { return fibsCompCount; }

	@Override
	String toString() { ... } // returns all cached Fib values, comma-space-separated on a single line
	
}

The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
The next number is found by adding up the two numbers before it.

Implement the above class. Your job is to cache all fibonacci number that have already been computed so they are not re-computed again and again.

You are NOT allowed to use any other data structures like ArrayLists, HashMaps, Arrays class, etc. except the one provided above.

You are NOT allowed to add or remove any methods or fields in the above code.

Special permission: You may add private helper methods if you wish and a public constructor.

Test your implementation, all it functionality in the main() method of your program.
